security:
  password_hashers:
    Whipo\Shop\Modules\Authentication\Infrastructure\Account\SymfonyAccount:
      algorithm: bcrypt
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#  providers:
#    app_user_provider:
#      entity:
#        class: Whipo\Shop\Modules\Authentication\Infrastructure\Account\SymfonyAccount
#        property: email

  providers:
    custom_provider:
      id:  Whipo\Shop\Modules\Authentication\Infrastructure\Provider\SecurityUserProvider
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt))/
      security: false
    main:
      lazy: true
      provider: custom_provider
      form_login:
        login_path: login
        check_path: login
      logout:
        path: logout
        target: home

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin, roles: ROLE_USER }
     # - { path: ^/profile, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon

